#!/data/data/com.termux/files/usr/bin/env bash

# File: wpd

# Help message
show_help() {
    cat << EOF
Usage: wpd [OPTIONS]

Options:
  useradd {user}             Add a user to be invoked later.

  userdel                    Remove the saved user.

  -d, --distro {distro}      Select a distro to login with.

  -su, --select-user {user}  Log in with the specified user
                             in the selected distro.

  i, install {distro}        Install the specified distro.

  rm, remove {distro}        Remove the specified distro.

  rs, reset {distro}         Reset the specified distro.

  ls, list                   List all available distros.

  cl, clear                  Clear proot-distro cache.

  mv, rename {distro}        Rename the specified distro.

  restore {path}             Restore a distro from a file.

  bk, backup {distro} {path} Backup the specified distro to a file.

  --verbose                  Enable verbose logging.

  --help                     Show this help message.

Examples:
  wpd useradd welpyes
  wpd userdel
  wpd -d fedora
  wpd -d fedora --su welpyes
  wpd i fedora
  wpd rm ubuntu
  wpd rs debian
  wpd ls
  wpd cl
  wpd mv fedora
  wpd restore /path/to/file
  wpd bk debian /path/to/backup.tar.gz
EOF
}

# Default vars
distro=""
user=""
verbose=0
cache_dir="$HOME/.cache"
cache_file="$cache_dir/wp_user"

# check if cache exist
mkdir -p "$cache_dir"

# Verbose logging
log() {
    if [[ $verbose -eq 1 ]]; then
        echo "[INFO] $1"
    fi
}

# Error handling
error() {
    echo "[ERROR] $1" >&2
    exit 1
}

# Add a user
add_user() {
    [[ -z $1 ]] && error "No user provided for useradd."
    echo "$1" > "$cache_file"  # Save user to cache
    log "User '$1' added for future use."
}

# Delete saved user
delete_user() {
    if [[ -f "$cache_file" ]]; then
        rm -f "$cache_file"
        log "Saved user removed."
    else
        echo "No saved user to remove."
    fi
}

# Distro management 
manage_distro() {
    local action=$1
    local arg1=$2
    local arg2=$3

    case $action in
        install|i)
            [[ -z $arg1 ]] && error "No distro specified for install."
            log "Installing distro '$arg1'..."
            proot-distro install "$arg1"
            ;;
        remove|rm)
            [[ -z $arg1 ]] && error "No distro specified for removal."
            log "Removing distro '$arg1'..."
            proot-distro remove "$arg1"
            ;;
        reset|rs)
            [[ -z $arg1 ]] && error "No distro specified for reset."
            log "Resetting distro '$arg1'..."
            proot-distro reset "$arg1"
            ;;
        list|ls)
            log "Listing all available distros..."
            proot-distro list
            ;;
        clear|cl)
            log "Clearing proot-distro cache..."
            proot-distro clear-cache
            ;;
        rename|mv)
            [[ -z $arg1 ]] && error "No distro specified for rename."
            log "Renaming distro '$arg1'..."
            proot-distro mv "$arg1"
            ;;
        restore)
            [[ -z $arg1 ]] && error "No file path specified for restore."
            log "Restoring distro from '$arg1'..."
            proot-distro restore "$arg1"
            ;;
        backup|bk)
            [[ -z $arg1 || -z $arg2 ]] && error "Distro or output path missing for backup."
            log "Backing up distro '$arg1' to '$arg2'..."
            proot-distro backup "$arg1" "$arg2"
            ;;
        *)
            error "Unknown action: $action"
            ;;
    esac
}

# Args paser
if [[ $# -eq 0 ]]; then
    show_help
    exit 0
fi

while [[ $# -gt 0 ]]; do
    case $1 in
        useradd)
            add_user "$2"
            exit 0
            ;;
        userdel)
            delete_user
            exit 0
            ;;
        i|install|rm|remove|rs|reset|ls|list|cl|clear|mv|rename|restore|backup|bk)
            manage_distro "$1" "$2" "$3"
            exit 0
            ;;
        -d|--distro)
            distro="$2"
            shift
            ;;
        -su|--select-user)
            user="$2"
            shift
            ;;
        --verbose)
            verbose=1
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            error "Unknown option: $1"
            ;;
    esac
    shift
done

# Distro error handler
if [[ -z $distro ]]; then
    error "No distro specified."
fi

# empty cache handler
if [[ -z $user && -f "$cache_file" && -s "$cache_file" ]]; then
    user=$(cat "$cache_file")
fi

# Build and execute the login command
command="proot-distro login $distro"
if [[ -n $user ]]; then
    if [[ $user == "root" ]]; then
        command+=" -- /bin/bash"
    else
        command+=" --shared-tmp -- /bin/bash -c \"su - $user\""
    fi
fi

log "Executing: $command"
eval "$command"
